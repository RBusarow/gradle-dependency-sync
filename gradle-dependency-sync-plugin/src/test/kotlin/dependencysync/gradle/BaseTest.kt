/*
 * Copyright (C) 2021 Rick Busarow
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dependencysync.gradle

import hermit.test.junit.HermitJUnit5
import io.kotest.matchers.collections.shouldContain
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.TestInfo
import java.io.File
import io.kotest.matchers.shouldBe as kotestShouldBe

public val DEFAULT_GRADLE_VERSION: String = System
  .getProperty("modulecheck.gradleVersion", "7.0.2")
  /*
  * The GitHub Actions test matrix parses "7.0" into an Int and passes in a command line argument of "7".
  * That version doesn't resolve.  So if the String doesn't contain a period, just append ".0"
  */
  .let { prop ->
    if (prop.contains('.')) prop else "$prop.0"
  }
public val DEFAULT_KOTLIN_VERSION: String =
  System.getProperty("modulecheck.kotlinVersion", "1.5.10")
public val DEFAULT_AGP_VERSION: String =
  System.getProperty("modulecheck.agpVersion", "7.0.0-beta02")

abstract class BaseTest : HermitJUnit5() {

  val testProjectDir by tempDir()

  fun File.relativePath() = path.removePrefix(testProjectDir.path)

  fun String.fixPath(): String = replace(File.separator, "/")

  private val kotlinVersion = DEFAULT_KOTLIN_VERSION
  private val agpVersion = DEFAULT_AGP_VERSION
  private val gradleVersion = DEFAULT_GRADLE_VERSION

  val gradleRunner by resets {
    GradleRunner
      .create()
      .forwardOutput()
      .withGradleVersion(gradleVersion)
      .withPluginClasspath()
      // .withDebug(true)
      .withProjectDir(testProjectDir)
  }

  private var testInfo: TestInfo? = null

  fun build(vararg tasks: String): BuildResult {
    return gradleRunner.withArguments(*tasks).build()
  }

  fun BuildResult.shouldSucceed() {
    tasks.forEach { it.outcome shouldBe TaskOutcome.SUCCESS }
  }

  fun shouldFailWithMessage(vararg tasks: String, messageBlock: (String) -> Unit) {
    val result = gradleRunner.withArguments(*tasks).buildAndFail()

    result.tasks.map { it.outcome } shouldContain TaskOutcome.FAILED
    messageBlock(result.output.fixPath())
  }

  @BeforeEach
  fun beforeEach(testInfo: TestInfo) {
    this.testInfo = testInfo
  }

  @AfterEach
  fun afterEach() {
    testInfo = null
  }

  @Suppress("UNCHECKED_CAST", "NOTHING_TO_INLINE")
  infix fun <T, U : T> T.shouldBe(expected: U?) {
    /*
    Any AssertionError generated by this function will have this function at the top of its stacktrace.

    The actual call site for the assertion is always the _second_ line.

    So, we can catch the assertion error, remove this function from the stacktrace, and rethrow.
     */
    try {
      kotestShouldBe(expected)
    } catch (assertionError: AssertionError) {
      // remove this function from the stacktrace and rethrow
      assertionError.stackTrace = assertionError
        .stackTrace
        .drop(1)
        .toTypedArray()
      throw assertionError
    }
  }
}
